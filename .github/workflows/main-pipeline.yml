# Nome do Workflow
name: Build and Deploy to MicroK8s

# Gatilho: Executa sempre que houver um push na branch 'main'
on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  #----------------------------------------------------
  # JOB 1: Construir a imagem Docker e enviar para o GHCR
  #----------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # Expõe a tag da imagem para outros jobs
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  #----------------------------------------------------
  # JOB 2: Aplicar configurações e segredos no cluster
  #----------------------------------------------------
  apply-configs:
    name: "Deploy: Apply Configs & Secrets"
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up Kubeconfig from Base64 secret
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create/Update GHCR ImagePullSecret
        run: |
          # Este segredo é criado a cada deploy para simplificar o setup inicial do cluster,
          # evitando a necessidade de executar um script manual antes da primeira execução da pipeline.
          # Em um cenário ideal, este segredo seria gerenciado como parte da infraestrutura base.
          kubectl create secret docker-registry ghcr-secret \
            --namespace=default \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests (ConfigMap and Service)
        run: |
          kubectl apply -f k8s/configmap.yaml -n default
          kubectl apply -f k8s/service.yaml -n default

  #----------------------------------------------------
  # JOB 3: Atualizar a imagem e verificar o deploy
  #----------------------------------------------------
  rollout-update:
    name: "Deploy: Rollout Image & Verify"
    needs: [build-and-push, apply-configs]
    runs-on: ubuntu-latest

    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up Kubeconfig from Base64 secret
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update deployment image
        run: |
          kubectl set image deployment/student-service student-service-container=ghcr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }} -n default

      - name: Verify deployment rollout
        run: |
          kubectl rollout status deployment/student-service -n default

      - name: Display pods status
        run: |
          echo "Deployment successful! Pods status:"
          kubectl get pods -n default