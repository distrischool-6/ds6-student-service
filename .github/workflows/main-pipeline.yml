# Nome do Workflow
name: Build and Deploy to K3s (via SSH)

# Gatilho: Executa sempre que houver um push na branch 'main'
on:
  push:
    branches:
      - main

env:
  # Define o nome da imagem para ser usado em ambos os jobs
  IMAGE_NAME: ${{ github.repository }}

jobs:
  #----------------------------------------------------
  # JOB 1: Construir a imagem Docker e enviar para o GHCR
  #----------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  #----------------------------------------------------
  # JOB 2: Fazer o deploy via SSH na VPS
  #----------------------------------------------------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to K3s via SSH
        uses: appleboy/ssh-action@v1.0.3 # Usando uma versão específica e estável
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define o nome completo da imagem com a nova tag
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            
            # Atualiza o deployment do Kubernetes para usar a nova imagem.
            # Este comando roda DENTRO da sua VPS, onde o kubectl sempre funciona!
            echo "Atualizando deployment para a imagem: $NEW_IMAGE"
            sudo k3s kubectl set image deployment/student-service-deployment student-service=$NEW_IMAGE
            
            # Aguarda e verifica o status do rollout para confirmar que subiu corretamente
            echo "Verificando o status do deploy..."
            sudo k3s kubectl rollout status deployment/student-service-deployment
            
            echo "Deploy concluído! Verificando pods:"
            sudo k3s kubectl get pods