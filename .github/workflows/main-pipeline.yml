# Nome do Workflow
name: Build and Deploy to K3s (via SSH)

# Gatilho: Executa sempre que houver um push na branch 'main'
on:
  push:
    branches:
      - main

env:
  # Define o nome da imagem para ser usado em ambos os jobs
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  #----------------------------------------------------
  # JOB 1: Construir a imagem Docker e enviar para o GHCR
  #----------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  #----------------------------------------------------
  # JOB 2: Fazer o deploy via SSH na VPS
  #----------------------------------------------------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to K3s via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Garante que o git está instalado na VPS
            sudo apt-get update
            sudo apt-get install -y git
            
            # Remove o diretório do repositório antigo, se existir, para uma clonagem limpa
            rm -rf ${{ env.REPO_NAME }}
            
            # Clona o repositório DENTRO da VPS
            git clone ${{ env.REPO_URL }}
            
            # Define o nome completo da imagem com a nova tag
            NEW_IMAGE="ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            
            # Entra no diretório do repositório clonado
            cd ${{ env.REPO_NAME }}
            
            # !!!!! A CORREÇÃO FINAL E DEFINITIVA !!!!!
            # Atualiza o arquivo de deployment com a tag de imagem correta ANTES de aplicar
            # A mudança chave é `image: $NEW_IMAGE` para garantir que a chave "image:" seja preservada.
            echo "Atualizando o arquivo deployment.yaml com a imagem: $NEW_IMAGE"
            sed -i "s|image: .*|image: $NEW_IMAGE|g" k8s/deployment.yaml
            
            # APLICA os manifestos. Isso vai CRIAR os recursos na primeira vez.
            echo "Aplicando os manifestos do Kubernetes..."
            sudo k3s kubectl apply -f k8s/
            
            # Aguarda o deploy ser concluído
            echo "Verificando o status do deploy..."
            sudo k3s kubectl rollout status deployment/student-service
            
            echo "Deploy concluído! Verificando pods:"
            sudo k3s kubectl get pods
